// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CatsShopClient is the client API for CatsShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatsShopClient interface {
	CreateCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Errmsg, error)
	DeleteCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Errmsg, error)
	UpdateCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Errmsg, error)
	GetCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Catparams, error)
	ListCats(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Json, error)
	CreateUser(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Errmsg, error)
	DeleteUser(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Errmsg, error)
	UpdateUser(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Errmsg, error)
	Login(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Jwtoken, error)
	ListUsers(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Json, error)
	AddOperation(ctx context.Context, in *Operationparams, opts ...grpc.CallOption) (*Errmsg, error)
	EditOperation(ctx context.Context, in *Operationparams, opts ...grpc.CallOption) (*Errmsg, error)
	ListOperations(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Json, error)
	GetOperation(ctx context.Context, in *Operationparams, opts ...grpc.CallOption) (*Operationparams, error)
}

type catsShopClient struct {
	cc grpc.ClientConnInterface
}

func NewCatsShopClient(cc grpc.ClientConnInterface) CatsShopClient {
	return &catsShopClient{cc}
}

func (c *catsShopClient) CreateCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/CreateCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) DeleteCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/DeleteCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) UpdateCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/UpdateCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) GetCat(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Catparams, error) {
	out := new(Catparams)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/GetCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) ListCats(ctx context.Context, in *Catparams, opts ...grpc.CallOption) (*Json, error) {
	out := new(Json)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/ListCats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) CreateUser(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) DeleteUser(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) UpdateUser(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) Login(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Jwtoken, error) {
	out := new(Jwtoken)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) ListUsers(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Json, error) {
	out := new(Json)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) AddOperation(ctx context.Context, in *Operationparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/AddOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) EditOperation(ctx context.Context, in *Operationparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/EditOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) ListOperations(ctx context.Context, in *Userparams, opts ...grpc.CallOption) (*Json, error) {
	out := new(Json)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsShopClient) GetOperation(ctx context.Context, in *Operationparams, opts ...grpc.CallOption) (*Operationparams, error) {
	out := new(Operationparams)
	err := c.cc.Invoke(ctx, "/protocol.CatsShop/GetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatsShopServer is the server API for CatsShop service.
// All implementations must embed UnimplementedCatsShopServer
// for forward compatibility
type CatsShopServer interface {
	CreateCat(context.Context, *Catparams) (*Errmsg, error)
	DeleteCat(context.Context, *Catparams) (*Errmsg, error)
	UpdateCat(context.Context, *Catparams) (*Errmsg, error)
	GetCat(context.Context, *Catparams) (*Catparams, error)
	ListCats(context.Context, *Catparams) (*Json, error)
	CreateUser(context.Context, *Userparams) (*Errmsg, error)
	DeleteUser(context.Context, *Userparams) (*Errmsg, error)
	UpdateUser(context.Context, *Userparams) (*Errmsg, error)
	Login(context.Context, *Userparams) (*Jwtoken, error)
	ListUsers(context.Context, *Userparams) (*Json, error)
	AddOperation(context.Context, *Operationparams) (*Errmsg, error)
	EditOperation(context.Context, *Operationparams) (*Errmsg, error)
	ListOperations(context.Context, *Userparams) (*Json, error)
	GetOperation(context.Context, *Operationparams) (*Operationparams, error)
}

// UnimplementedCatsShopServer must be embedded to have forward compatible implementations.
type UnimplementedCatsShopServer struct {
}

func (UnimplementedCatsShopServer) CreateCat(context.Context, *Catparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCat not implemented")
}
func (UnimplementedCatsShopServer) DeleteCat(context.Context, *Catparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCat not implemented")
}
func (UnimplementedCatsShopServer) UpdateCat(context.Context, *Catparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCat not implemented")
}
func (UnimplementedCatsShopServer) GetCat(context.Context, *Catparams) (*Catparams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCat not implemented")
}
func (UnimplementedCatsShopServer) ListCats(context.Context, *Catparams) (*Json, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCats not implemented")
}
func (UnimplementedCatsShopServer) CreateUser(context.Context, *Userparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCatsShopServer) DeleteUser(context.Context, *Userparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCatsShopServer) UpdateUser(context.Context, *Userparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCatsShopServer) Login(context.Context, *Userparams) (*Jwtoken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCatsShopServer) ListUsers(context.Context, *Userparams) (*Json, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedCatsShopServer) AddOperation(context.Context, *Operationparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperation not implemented")
}
func (UnimplementedCatsShopServer) EditOperation(context.Context, *Operationparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditOperation not implemented")
}
func (UnimplementedCatsShopServer) ListOperations(context.Context, *Userparams) (*Json, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedCatsShopServer) GetOperation(context.Context, *Operationparams) (*Operationparams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedCatsShopServer) mustEmbedUnimplementedCatsShopServer() {}

// UnsafeCatsShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatsShopServer will
// result in compilation errors.
type UnsafeCatsShopServer interface {
	mustEmbedUnimplementedCatsShopServer()
}

func RegisterCatsShopServer(s grpc.ServiceRegistrar, srv CatsShopServer) {
	s.RegisterService(&_CatsShop_serviceDesc, srv)
}

func _CatsShop_CreateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).CreateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/CreateCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).CreateCat(ctx, req.(*Catparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_DeleteCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).DeleteCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/DeleteCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).DeleteCat(ctx, req.(*Catparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_UpdateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).UpdateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/UpdateCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).UpdateCat(ctx, req.(*Catparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_GetCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).GetCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/GetCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).GetCat(ctx, req.(*Catparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_ListCats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).ListCats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/ListCats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).ListCats(ctx, req.(*Catparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).CreateUser(ctx, req.(*Userparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).DeleteUser(ctx, req.(*Userparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).UpdateUser(ctx, req.(*Userparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).Login(ctx, req.(*Userparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).ListUsers(ctx, req.(*Userparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_AddOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operationparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).AddOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/AddOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).AddOperation(ctx, req.(*Operationparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_EditOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operationparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).EditOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/EditOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).EditOperation(ctx, req.(*Operationparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).ListOperations(ctx, req.(*Userparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsShop_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operationparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsShopServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CatsShop/GetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsShopServer).GetOperation(ctx, req.(*Operationparams))
	}
	return interceptor(ctx, in, info, handler)
}

var _CatsShop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.CatsShop",
	HandlerType: (*CatsShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCat",
			Handler:    _CatsShop_CreateCat_Handler,
		},
		{
			MethodName: "DeleteCat",
			Handler:    _CatsShop_DeleteCat_Handler,
		},
		{
			MethodName: "UpdateCat",
			Handler:    _CatsShop_UpdateCat_Handler,
		},
		{
			MethodName: "GetCat",
			Handler:    _CatsShop_GetCat_Handler,
		},
		{
			MethodName: "ListCats",
			Handler:    _CatsShop_ListCats_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _CatsShop_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CatsShop_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _CatsShop_UpdateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CatsShop_Login_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _CatsShop_ListUsers_Handler,
		},
		{
			MethodName: "AddOperation",
			Handler:    _CatsShop_AddOperation_Handler,
		},
		{
			MethodName: "EditOperation",
			Handler:    _CatsShop_EditOperation_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _CatsShop_ListOperations_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _CatsShop_GetOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catsshop.proto",
}
